plugins {
    id "com.github.johnrengelman.shadow"
    id 'org.jetbrains.kotlin.jvm'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "aris-common.mixins.json"
        mixinConfig "aris.mixins.json"
    }
}

repositories {
    // Add KFF Maven repository
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    forgeRuntimeLibrary "me.ddayo:aris.luagen"
    implementation "me.ddayo:aris.luagen"
    shadowCommon("me.ddayo:aris.luagen") { transitive false }
    forgeRuntimeLibrary 'party.iroiro.luajava:luajit-platform:4.0.2:natives-desktop'
    runtimeOnly 'party.iroiro.luajava:luajit-platform:4.0.2:natives-desktop'
    shadowCommon 'party.iroiro.luajava:luajit-platform:4.0.2:natives-desktop'
    modImplementation 'thedarkcolour:kotlinforforge:4.11.0'
    shadowCommon "party.iroiro.luajava:luajit:4.0.2"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
repositories {
    mavenCentral()
}
kotlin {
    jvmToolchain(17)
}
